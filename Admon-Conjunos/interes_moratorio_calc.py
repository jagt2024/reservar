import streamlit as st
import pandas as pd
from datetime import datetime, date
import numpy as np

def calcular_interes_moratorio(pago_principal, tasa_moratoria, dias_mora, a√±o_base=360):
    """
    Calcula el inter√©s moratorio sobre el pago principal de una cuota vencida.
    
    Par√°metros:
    - pago_principal: Monto del pago principal de la cuota vencida
    - tasa_moratoria: Tasa de inter√©s moratorio anual (en decimal, ej: 0.05 para 5%)
    - dias_mora: N√∫mero de d√≠as de mora
    - a√±o_base: D√≠as del a√±o para el c√°lculo (default 360)
    
    Retorna:
    - Inter√©s moratorio calculado
    """
    interes_moratorio = pago_principal * tasa_moratoria * (dias_mora / a√±o_base)
    return interes_moratorio

def simulador_main():
    st.title("üßÆ Calculadora de Inter√©s Moratorio")
    st.markdown("---")
    
    # Configuraci√≥n en sidebar
    st.sidebar.header("‚öôÔ∏è Configuraci√≥n")
    a√±o_base = st.sidebar.selectbox(
        "A√±o base para c√°lculo",
        options=[360, 365],
        index=0,
        help="360 d√≠as es el est√°ndar comercial, 365 d√≠as es el a√±o calendario"
    )
    
    # Pesta√±as para diferentes modalidades de c√°lculo
    tab1, tab2, tab3 = st.tabs(["üìä C√°lculo Individual", "üìã C√°lculo M√∫ltiple", "üìà An√°lisis por Per√≠odos"])
    
    with tab1:
        st.subheader("C√°lculo Individual de Inter√©s Moratorio")
        
        col1, col2 = st.columns(2)
        
        with col1:
            pago_principal = st.number_input(
                "üí∞ Pago Principal ($)",
                min_value=0.0,
                value=1000.0,
                step=100.0,
                format="%.2f"
            )
            
            tasa_moratoria = st.number_input(
                "üìä Tasa de Inter√©s Moratorio (% anual)",
                min_value=0.0,
                max_value=100.0,
                value=12.0,
                step=0.5,
                format="%.2f"
            )
        
        with col2:
            # Opci√≥n para calcular d√≠as autom√°ticamente o ingresarlos manualmente
            modo_calculo = st.radio(
                "üóìÔ∏è Modo de c√°lculo de d√≠as",
                options=["D√≠as espec√≠ficos", "Calcular entre fechas"]
            )
            
            if modo_calculo == "D√≠as espec√≠ficos":
                dias_mora = st.number_input(
                    "üìÖ D√≠as de mora",
                    min_value=0,
                    value=30,
                    step=1
                )
            else:
                col_fecha1, col_fecha2 = st.columns(2)
                with col_fecha1:
                    fecha_vencimiento = st.date_input(
                        "Fecha de vencimiento",
                        value=date(2024, 1, 1)
                    )
                with col_fecha2:
                    fecha_calculo = st.date_input(
                        "Fecha de c√°lculo",
                        value=date.today()
                    )
                
                dias_mora = (fecha_calculo - fecha_vencimiento).days
                if dias_mora < 0:
                    st.error("‚ö†Ô∏è La fecha de c√°lculo debe ser posterior a la fecha de vencimiento")
                    dias_mora = 0
                else:
                    st.info(f"üìÖ D√≠as de mora calculados: {dias_mora}")
        
        # C√°lculo
        tasa_decimal = tasa_moratoria / 100
        interes_moratorio = calcular_interes_moratorio(pago_principal, tasa_decimal, dias_mora, a√±o_base)
        
        # Mostrar resultados
        st.markdown("---")
        st.subheader("üìà Resultados del C√°lculo")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                label="üí∞ Pago Principal",
                value=f"${pago_principal:,.2f}"
            )
        
        with col2:
            st.metric(
                label="üìä Tasa Moratoria",
                value=f"{tasa_moratoria}% anual"
            )
        
        with col3:
            st.metric(
                label="üìÖ D√≠as de Mora",
                value=f"{dias_mora} d√≠as"
            )
        
        with col4:
            st.metric(
                label="üî• Inter√©s Moratorio",
                value=f"${interes_moratorio:,.2f}",
                delta=f"{(interes_moratorio/pago_principal*100):,.2f}%" if pago_principal > 0 else None
            )
        
        # F√≥rmula utilizada
        st.markdown("---")
        st.subheader("üìù F√≥rmula Utilizada")
        st.latex(r"""
        Inter√©s\ Moratorio = Pago\ Principal \times Tasa\ Moratoria \times \frac{D√≠as\ de\ Mora}{""" + str(a√±o_base) + r"""}
        """)
        
        st.code(f"""
        Inter√©s Moratorio = ${pago_principal:,.2f} √ó {tasa_moratoria}% √ó ({dias_mora}/{a√±o_base})
        Inter√©s Moratorio = ${pago_principal:,.2f} √ó {tasa_decimal:.4f} √ó {dias_mora/a√±o_base:.6f}
        Inter√©s Moratorio = ${interes_moratorio:,.2f}
        """)
    
    with tab2:
        st.subheader("C√°lculo M√∫ltiple de Intereses Moratorios")
        
        # Configuraci√≥n para m√∫ltiples cuotas
        col1, col2 = st.columns(2)
        
        with col1:
            tasa_moratoria_mult = st.number_input(
                "üìä Tasa de Inter√©s Moratorio (% anual)",
                min_value=0.0,
                max_value=100.0,
                value=12.0,
                step=0.5,
                format="%.2f",
                key="tasa_mult"
            )
        
        with col2:
            num_cuotas = st.number_input(
                "üìã N√∫mero de cuotas a calcular",
                min_value=1,
                max_value=50,
                value=5,
                step=1
            )
        
        # Crear formulario para m√∫ltiples cuotas
        cuotas_data = []
        
        st.markdown("---")
        st.subheader("üìä Ingrese los datos de cada cuota:")
        
        for i in range(num_cuotas):
            with st.expander(f"Cuota {i+1}", expanded=(i < 3)):
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    principal = st.number_input(
                        f"üí∞ Pago Principal Cuota {i+1} ($)",
                        min_value=0.0,
                        value=1000.0,
                        step=100.0,
                        key=f"principal_{i}"
                    )
                
                with col2:
                    dias = st.number_input(
                        f"üìÖ D√≠as de mora Cuota {i+1}",
                        min_value=0,
                        value=(i+1)*30,
                        step=1,
                        key=f"dias_{i}"
                    )
                
                with col3:
                    tasa_decimal_mult = tasa_moratoria_mult / 100
                    interes = calcular_interes_moratorio(principal, tasa_decimal_mult, dias, a√±o_base)
                    st.metric(
                        f"üî• Inter√©s Cuota {i+1}",
                        f"${interes:,.2f}"
                    )
                
                cuotas_data.append({
                    'Cuota': i+1,
                    'Pago Principal': principal,
                    'D√≠as Mora': dias,
                    'Inter√©s Moratorio': interes,
                    'Total': principal + interes
                })
        
        # Crear DataFrame y mostrar tabla
        df_cuotas = pd.DataFrame(cuotas_data)
        
        st.markdown("---")
        st.subheader("üìã Resumen de C√°lculos")
        
        # Formatear tabla
        df_display = df_cuotas.copy()
        df_display['Pago Principal'] = df_display['Pago Principal'].apply(lambda x: f"${x:,.2f}")
        df_display['Inter√©s Moratorio'] = df_display['Inter√©s Moratorio'].apply(lambda x: f"${x:,.2f}")
        df_display['Total'] = df_display['Total'].apply(lambda x: f"${x:,.2f}")
        
        st.dataframe(df_display, use_container_width=True)
        
        # Totales
        total_principal = df_cuotas['Pago Principal'].sum()
        total_interes = df_cuotas['Inter√©s Moratorio'].sum()
        total_general = total_principal + total_interes
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("üí∞ Total Principal", f"${total_principal:,.2f}")
        
        with col2:
            st.metric("üî• Total Intereses", f"${total_interes:,.2f}")
        
        with col3:
            st.metric("üíµ Total General", f"${total_general:,.2f}")
    
    with tab3:
        st.subheader("An√°lisis de Inter√©s Moratorio por Per√≠odos")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            principal_analisis = st.number_input(
                "üí∞ Pago Principal ($)",
                min_value=0.0,
                value=5000.0,
                step=100.0,
                key="principal_analisis"
            )
        
        with col2:
            tasa_analisis = st.number_input(
                "üìä Tasa Moratoria (% anual)",
                min_value=0.0,
                max_value=100.0,
                value=18.0,
                step=0.5,
                key="tasa_analisis"
            )
        
        with col3:
            max_dias = st.number_input(
                "üìÖ M√°ximo d√≠as a analizar",
                min_value=30,
                max_value=720,
                value=365,
                step=30
            )
        
        # Generar datos para an√°lisis
        dias_range = range(1, max_dias + 1, 7)  # Cada 7 d√≠as
        tasa_decimal_analisis = tasa_analisis / 100
        
        analisis_data = []
        for dias in dias_range:
            interes = calcular_interes_moratorio(principal_analisis, tasa_decimal_analisis, dias, a√±o_base)
            porcentaje = (interes / principal_analisis) * 100 if principal_analisis > 0 else 0
            
            analisis_data.append({
                'D√≠as': dias,
                'Inter√©s Moratorio': interes,
                'Porcentaje del Principal': porcentaje,
                'Total Adeudado': principal_analisis + interes
            })
        
        df_analisis = pd.DataFrame(analisis_data)
        
        # Gr√°fico
        st.line_chart(
            df_analisis.set_index('D√≠as')[['Inter√©s Moratorio']],
            use_container_width=True
        )
        
        # Milestones importantes
        st.markdown("---")
        st.subheader("üéØ Hitos Importantes")
        
        milestones = [30, 60, 90, 180, 365]
        milestone_data = []
        
        for milestone in milestones:
            if milestone <= max_dias:
                interes = calcular_interes_moratorio(principal_analisis, tasa_decimal_analisis, milestone, a√±o_base)
                porcentaje = (interes / principal_analisis) * 100 if principal_analisis > 0 else 0
                milestone_data.append({
                    'Per√≠odo': f"{milestone} d√≠as",
                    'Inter√©s Moratorio': f"${interes:,.2f}",
                    '% del Principal': f"{porcentaje:.2f}%",
                    'Total': f"${principal_analisis + interes:,.2f}"
                })
        
        df_milestones = pd.DataFrame(milestone_data)
        st.dataframe(df_milestones, use_container_width=True)

if __name__ == "__main__":
    simulador_main()
