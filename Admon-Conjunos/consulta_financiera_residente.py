import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
import toml
import json
from datetime import datetime, date
from io import BytesIO
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.units import inch
import base64

# Configuraci√≥n de la p√°gina
#st.set_page_config(
#    page_title="Gesti√≥n Financiera - Consultas",
#    page_icon="üí∞",
#    layout="wide"
#)

def load_credentials_from_toml():
    """Cargar credenciales desde el archivo secrets.toml"""
    try:
        with open('./.streamlit/secrets.toml', 'r') as toml_file:
            config = toml.load(toml_file)
            creds = config['sheetsemp']['credentials_sheet']
            if isinstance(creds, str):
                creds = json.loads(creds)
            return creds, config
    except FileNotFoundError:
        st.error("üìÅ Archivo secrets.toml no encontrado en .streamlit/")
        st.info("Crea el archivo `.streamlit/secrets.toml` con tus credenciales")
        return None, None
    except KeyError as e:
        st.error(f"üîë Clave faltante en secrets.toml: {str(e)}")
        st.info("Verifica la estructura del archivo secrets.toml")
        return None, None
    except json.JSONDecodeError as e:
        st.error(f"üìÑ Error al parsear JSON en secrets.toml: {str(e)}")
        return None, None
    except Exception as e:
        st.error(f"‚ùå Error cargando credenciales: {str(e)}")
        return None, None

@st.cache_resource(ttl=300)
def get_google_sheets_connection(_creds):
    """Establecer conexi√≥n con Google Sheets"""
    try:
        scope = [
            'https://spreadsheets.google.com/feeds', 
            'https://www.googleapis.com/auth/drive'
        ]
        credentials = Credentials.from_service_account_info(_creds, scopes=scope)
        client = gspread.authorize(credentials)
    
        # Verificar la conexi√≥n intentando listar las hojas
        try:
            sheets = client.openall()
            st.success(f"‚úÖ Conexi√≥n exitosa! y disponible")
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Conexi√≥n establecida pero sin acceso completo: {str(e)}")
    
        return client

    except Exception as e:
        st.error(f"‚ùå Error conectando a Google Sheets: {str(e)}")
        return None

@st.cache_data(ttl=300)
def load_control_residentes(_client):
    """Cargar datos de control de residentes"""
    try:
        spreadsheet = _client.open("gestion-conjuntos")
        worksheet = spreadsheet.worksheet("Control_Residentes")
        data = worksheet.get_all_records()
        
        if not data:
            return pd.DataFrame()
        
        return pd.DataFrame(data)
        
    except gspread.WorksheetNotFound:
        st.error("‚ùå No se encontr√≥ la hoja 'Control_Residentes'")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"‚ùå Error cargando control de residentes: {str(e)}")
        return pd.DataFrame()

@st.cache_data(ttl=300)
def load_data_from_sheets(_client, unidad_permitida=None):
    """Cargar datos desde Google Sheets filtrados por unidad"""
    try:
        # Abrir el archivo de Google Sheets
        spreadsheet = _client.open("gestion-conjuntos")
        worksheet = spreadsheet.worksheet("Administracion_Financiera")
        
        # Obtener todos los datos
        data = worksheet.get_all_records()
        
        if not data:
            st.warning("‚ö†Ô∏è No se encontraron datos en la hoja")
            return pd.DataFrame()
        
        df = pd.DataFrame(data)
        
        # Filtrar por unidad si se especifica
        if unidad_permitida and 'Unidad' in df.columns:
            df = df[df['Unidad'] == unidad_permitida]
        
        # Convertir columna de fecha si existe
        if 'Fecha' in df.columns:
            df['Fecha'] = pd.to_datetime(df['Fecha'], errors='coerce')
        
        return df
        
    except gspread.SpreadsheetNotFound:
        st.error("‚ùå No se encontr√≥ el archivo 'gestion-conjuntos'")
        return pd.DataFrame()
    except gspread.WorksheetNotFound:
        st.error("‚ùå No se encontr√≥ la hoja 'Administracion_Financiera'")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"‚ùå Error cargando datos: {str(e)}")
        return pd.DataFrame()

def verificar_acceso_usuario(df_control, user_identificacion):
    """Verificar si el usuario tiene acceso y obtener su unidad usando el campo Identificacion"""
    if df_control.empty:
        return False, None
    
    # Buscar el usuario en el control de residentes usando el campo Identificacion
    if 'Identificacion' in df_control.columns:
        # Convertir ambos valores a string para comparaci√≥n segura
        df_control['Identificacion'] = df_control['Identificacion'].astype(str)
        user_identificacion_str = str(user_identificacion)
        
        usuario = df_control[df_control['Identificacion'] == user_identificacion_str]
        if not usuario.empty:
            unidad = usuario['Unidad'].iloc[0] if 'Unidad' in df_control.columns else None
            return True, unidad
    
    return False, None

def create_pdf_report(df, filters_info):
    """Crear reporte PDF con los datos filtrados"""
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    elements = []
    
    # Estilos
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=16,
        textColor=colors.darkblue,
        alignment=1,  # Centrado
        spaceAfter=20
    )
    
    # T√≠tulo
    title = Paragraph("Reporte de Gesti√≥n Financiera", title_style)
    elements.append(title)
    
    # Informaci√≥n de filtros aplicados
    filter_text = f"<b>Filtros aplicados:</b><br/>"
    for key, value in filters_info.items():
        if value and value != "Todos":
            filter_text += f"‚Ä¢ {key}: {value}<br/>"
    
    if filter_text != "<b>Filtros aplicados:</b><br/>":
        filter_para = Paragraph(filter_text, styles['Normal'])
        elements.append(filter_para)
        elements.append(Spacer(1, 12))
    
    # Informaci√≥n del reporte
    fecha_generacion = datetime.now().strftime("%d/%m/%Y %H:%M")
    info_text = f"<b>Fecha de generaci√≥n:</b> {fecha_generacion}<br/><b>Total de registros:</b> {len(df)}"
    info_para = Paragraph(info_text, styles['Normal'])
    elements.append(info_para)
    elements.append(Spacer(1, 20))
    
    if len(df) > 0:
        # Preparar datos para la tabla
        # Seleccionar solo las columnas requeridas
        required_columns = ['Tipo_Operacion', 'Unidad', 'Concepto', 'Monto', 'Fecha', 'Banco','Estado', 'Metodo_Pago']
        
        # Verificar qu√© columnas existen en el DataFrame
        available_columns = [col for col in required_columns if col in df.columns]
        
        if not available_columns:
            elements.append(Paragraph("‚ùå No se encontraron las columnas requeridas en los datos", styles['Normal']))
        else:
            # Crear datos para la tabla
            df_report = df[available_columns].copy()
            
            # Formatear fecha si existe
            if 'Fecha' in df_report.columns:
                df_report['Fecha'] = df_report['Fecha'].dt.strftime('%d/%m/%Y')
            
            # Encabezados
            headers = available_columns
            
            # Datos de la tabla
            table_data = [headers]
            
            for _, row in df_report.iterrows():
                table_data.append([str(row[col]) if pd.notna(row[col]) else '' for col in available_columns])
            
            # Crear tabla
            table = Table(table_data)
            
            # Estilo de la tabla
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 1), (-1, -1), 8),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ]))
            
            elements.append(table)
    else:
        elements.append(Paragraph("No hay datos para mostrar con los filtros aplicados", styles['Normal']))
    
    # Construir PDF
    doc.build(elements)
    buffer.seek(0)
    return buffer

def consulta_res_main():
    st.title("üí∞ Gesti√≥n Financiera - Sistema de Consultas")
    st.markdown("---")
    
    # Cargar credenciales
    creds, config = load_credentials_from_toml()
    
    if creds is None:
        st.stop()
    
    # Establecer conexi√≥n
    client = get_google_sheets_connection(creds)
    
    if client is None:
        st.stop()
    
    # **CONTROL DE ACCESO**
    st.header("üîê Control de Acceso")
    
    # Cargar datos de control de residentes
    with st.spinner("Verificando permisos de acceso..."):
        df_control = load_control_residentes(client)
    
    if df_control.empty:
        st.error("‚ùå No se pudo cargar el control de residentes")
        st.stop()
    
    # Mostrar Identificaciones disponibles para debug (opcional - puedes comentar esta l√≠nea en producci√≥n)
    with st.expander("üîç Identificaciones disponibles (solo para desarrollo)"):
        if 'Identificacion' in df_control.columns:
            st.write("Identificaciones registradas:", df_control['Identificacion'].tolist())
        else:
            st.error("‚ùå La columna 'Identificacion' no existe en Control_Residentes")
            st.info("Columnas disponibles:", df_control.columns.tolist())
    
    # Input para Identificaci√≥n de usuario
    user_identificacion = st.text_input(
        "ü™™ Ingrese su n√∫mero de identificaci√≥n:",
        placeholder="Ejemplo: 12345678, 1234567890, etc.",
        help="Ingrese el n√∫mero de identificaci√≥n que aparece en su registro de residente"
    )
    
    if not user_identificacion:
        st.info("üëÜ Por favor, ingrese su n√∫mero de identificaci√≥n para continuar")
        st.stop()
    
    # Verificar acceso
    acceso_permitido, unidad_usuario = verificar_acceso_usuario(df_control, user_identificacion)
    
    if not acceso_permitido:
        st.error("‚ùå **Acceso Denegado**")
        st.warning("El n√∫mero de identificaci√≥n ingresado no est√° registrado en el sistema")
        st.info("üí° Contacte al administrador si cree que esto es un error")
        st.stop()
    
    if not unidad_usuario:
        st.error("‚ùå **Error de Configuraci√≥n**")
        st.warning("No se encontr√≥ una unidad asignada para su identificaci√≥n")
        st.info("üí° Contacte al administrador para verificar su registro")
        st.stop()
    
    # Mostrar informaci√≥n del usuario autorizado
    st.success(f"‚úÖ **Acceso Autorizado**")
    col1, col2 = st.columns(2)
    with col1:
        st.info(f"ü™™ **Identificaci√≥n:** {user_identificacion}")
    with col2:
        st.info(f"üè† **Unidad:** {unidad_usuario}")
    
    st.markdown("---")
    
    # Cargar datos filtrados por la unidad del usuario
    with st.spinner(f"Cargando datos financieros para la unidad {unidad_usuario}..."):
        df = load_data_from_sheets(client, unidad_usuario)
    
    if df.empty:
        st.warning(f"‚ö†Ô∏è No hay datos financieros disponibles para la unidad {unidad_usuario}")
        st.info("üí° Los datos pueden estar siendo procesados o no hay movimientos registrados")
        st.stop()
    
    st.success(f"‚úÖ Datos cargados exitosamente: {len(df)} registros para la unidad {unidad_usuario}")
    
    # Mostrar informaci√≥n de las columnas disponibles
    with st.expander("üìä Informaci√≥n de los datos"):
        st.write(f"**Unidad consultada:** {unidad_usuario}")
        st.write(f"**Columnas disponibles:** {', '.join(df.columns.tolist())}")
        st.write(f"**Total de registros:** {len(df)}")
        if 'Fecha' in df.columns and not df['Fecha'].isna().all():
            fecha_min = df['Fecha'].min()
            fecha_max = df['Fecha'].max()
            st.write(f"**Rango de fechas:** {fecha_min.strftime('%d/%m/%Y')} - {fecha_max.strftime('%d/%m/%Y')}")
    
    # Sidebar para filtros (ahora solo fecha y estado, la unidad ya est√° filtrada)
    st.sidebar.header("üîç Filtros de B√∫squeda")
    st.sidebar.info(f"üè† **Unidad:** {unidad_usuario}")
    st.sidebar.markdown("---")
    
    # Filtros
    filters = {'Unidad': unidad_usuario}  # La unidad ya est√° determinada
    
    # Filtro por Estado
    if 'Estado' in df.columns:
        estados = ['Todos'] + sorted(df['Estado'].dropna().unique().tolist())
        filtro_estado = st.sidebar.selectbox("Filtrar por Estado:", estados)
        filters['Estado'] = filtro_estado
    
    # Filtro por Tipo de Operaci√≥n (nuevo filtro √∫til)
    if 'Tipo_Operacion' in df.columns:
        tipos_operacion = ['Todos'] + sorted(df['Tipo_Operacion'].dropna().unique().tolist())
        filtro_tipo = st.sidebar.selectbox("Filtrar por Tipo de Operaci√≥n:", tipos_operacion)
        filters['Tipo_Operacion'] = filtro_tipo
    
    # Filtro por Fecha
    if 'Fecha' in df.columns and not df['Fecha'].isna().all():
        st.sidebar.subheader("üìÖ Rango de Fechas")
        fecha_min = df['Fecha'].min().date()
        fecha_max = df['Fecha'].max().date()
        
        fecha_inicio = st.sidebar.date_input(
            "Fecha inicio:",
            value=fecha_min,
            min_value=fecha_min,
            max_value=fecha_max
        )
        
        fecha_fin = st.sidebar.date_input(
            "Fecha fin:",
            value=fecha_max,
            min_value=fecha_min,
            max_value=fecha_max
        )
        
        filters['Fecha Inicio'] = fecha_inicio.strftime('%d/%m/%Y')
        filters['Fecha Fin'] = fecha_fin.strftime('%d/%m/%Y')
    
    # Aplicar filtros
    df_filtered = df.copy()
    
    # Filtrar por Estado
    if 'Estado' in filters and filters['Estado'] != 'Todos':
        df_filtered = df_filtered[df_filtered['Estado'] == filters['Estado']]
    
    # Filtrar por Tipo de Operaci√≥n
    if 'Tipo_Operacion' in filters and filters['Tipo_Operacion'] != 'Todos':
        df_filtered = df_filtered[df_filtered['Tipo_Operacion'] == filters['Tipo_Operacion']]
    
    # Filtrar por Fecha
    if 'Fecha' in df.columns and 'Fecha Inicio' in filters:
        fecha_inicio_dt = pd.to_datetime(fecha_inicio)
        fecha_fin_dt = pd.to_datetime(fecha_fin)
        df_filtered = df_filtered[
            (df_filtered['Fecha'] >= fecha_inicio_dt) & 
            (df_filtered['Fecha'] <= fecha_fin_dt)
        ]
    
    # Mostrar resultados
    st.header("üìä Resultados de la Consulta")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Total de Registros", len(df))
    with col2:
        st.metric("Registros Filtrados", len(df_filtered))
    with col3:
        if len(df) > 0:
            porcentaje = (len(df_filtered) / len(df)) * 100
            st.metric("Porcentaje Mostrado", f"{porcentaje:.1f}%")
    
    # Mostrar datos filtrados
    if len(df_filtered) > 0:
        st.dataframe(
            df_filtered,
            use_container_width=True,
            hide_index=True
        )
        
        # Bot√≥n para generar PDF
        st.header("üìÑ Generar Reporte PDF")
        
        if st.button("üîΩ Descargar Reporte PDF", type="primary"):
            with st.spinner("Generando reporte PDF..."):
                try:
                    pdf_buffer = create_pdf_report(df_filtered, filters)
                    
                    # Crear nombre del archivo
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"reporte_financiero_unidad_{unidad_usuario}_{timestamp}.pdf"
                    
                    st.download_button(
                        label="üìÅ Descargar PDF",
                        data=pdf_buffer.getvalue(),
                        file_name=filename,
                        mime="application/pdf"
                    )
                    
                    st.success("‚úÖ Reporte PDF generado exitosamente!")
                    
                except Exception as e:
                    st.error(f"‚ùå Error generando PDF: {str(e)}")
    
    else:
        st.warning("‚ö†Ô∏è No se encontraron registros con los filtros aplicados")
        st.info("üí° Intenta ajustar los filtros para obtener resultados")
    
    # Informaci√≥n adicional
    st.markdown("---")
    with st.expander("‚ÑπÔ∏è Informaci√≥n del Sistema"):
        st.markdown(f"""
        **Control de Acceso Activo:**
        - ‚úÖ Usuario autenticado: {user_identificacion}
        - ‚úÖ Unidad autorizada: {unidad_usuario}
        - ‚úÖ Acceso solo a datos de la unidad asignada
        
        **Funcionalidades disponibles:**
        - ‚úÖ Control de acceso por n√∫mero de identificaci√≥n del residente
        - ‚úÖ Filtrado autom√°tico por unidad del usuario
        - ‚úÖ Filtrado por Estado  
        - ‚úÖ Filtrado por Tipo de Operaci√≥n
        - ‚úÖ Filtrado por rango de fechas
        - ‚úÖ Visualizaci√≥n de datos en tiempo real
        - ‚úÖ Generaci√≥n de reportes PDF
        - ‚úÖ Descarga de reportes con filtros aplicados
        
        **Columnas incluidas en el PDF:**
        - Tipo_Operacion
        - Unidad
        - Concepto
        - Monto
        - Fecha
        - Banco
        - Estado
        - Metodo_Pago
        
        **Seguridad:**
        - üîí Solo usuarios registrados pueden acceder
        - ü™™ Autenticaci√≥n por n√∫mero de identificaci√≥n
        - üè† Cada usuario ve √∫nicamente los datos de su unidad
        - üìä Los filtros respetan las restricciones de acceso
        """)

#if __name__ == "__main__":
#    consulta_res_main()